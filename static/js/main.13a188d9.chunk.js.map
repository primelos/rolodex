{"version":3,"sources":["components/card/index.jsx","components/card-list/index.js","components/search-box/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","monster","className","alt","src","id","name","email","CardList","children","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","response","json","this","filterMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yTAgBeA,G,kBAZF,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACZ,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAQI,GAAlC,4BACtB,6BAAKJ,EAAQK,OACb,4BAAIL,EAAQM,aCOTC,EAVE,SAAC,GAA2B,EAAzBC,SAA0B,IAAhBC,EAAe,EAAfA,SAC1B,OACE,qBAAKR,UAAU,YAAf,SACGQ,EAASC,KAAI,SAACV,GAAD,OACZ,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQI,UCOdO,G,MAbG,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAG9B,OACE,uBACEZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCoCHG,E,kDAxCb,aAAc,IAAD,8BACX,gBAeFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAftC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IAJJ,E,kMAWYI,MAAM,8C,cAAvBC,E,gBACgBA,EAASC,O,OAAzBzB,E,OACN0B,KAAKR,SAAS,CAAET,SAAUT,I,qIAOlB,IAAD,EAC2B0B,KAAKJ,MAA/Bb,EADD,EACCA,SAAUU,EADX,EACWA,YACZQ,EAAiBlB,EAASmB,QAAO,SAAA5B,GAAO,OAC5CA,EAAQK,KAAKwB,cAAcC,SAASX,EAAYU,kBAGlD,OACE,sBAAK5B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACEW,YAAa,kBACbC,aAAca,KAAKb,eAGrB,cAAC,EAAD,CAAUJ,SAAUkB,W,GApCVI,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.13a188d9.chunk.js","sourcesContent":["import React from 'react'\nimport './card.styles.css'\n\n\nconst Card = ({ monster }) => {\n    return (\n        <div className='card-container'>\n            <img alt='monster' src={`https://robohash.org/${monster.id}?set=set1&size=180x180`} />\n            <h2>{monster.name}</h2>\n            <p>{monster.email}</p>\n            \n\n        </div>\n    )\n}\n\nexport default Card\n","import React from 'react'\nimport './card-list.styles.css'\nimport Card from '../card'\n\n\n\nconst CardList = ({ children, monsters }) => {\n    return (\n      <div className=\"card-list\">\n        {monsters.map((monster) => (\n          <Card key={monster.id} monster={monster} />\n        ))}\n      </div>\n    );\n}\n\nexport default CardList\n","import React from 'react'\nimport './search-box.styles.css'\n\n\nconst SearchBox = ({ placeholder, handleChange }) => {\n\n\n    return (\n      <input\n        className='search'\n        type=\"search\"\n        placeholder={placeholder}\n        onChange={handleChange}\n      />\n    );\n}\n\nexport default SearchBox\n","import React, { Component } from \"react\"; \nimport './App.css'\nimport CardList from './components/card-list'\nimport SearchBox from \"./components/search-box\";\n\n\nclass App extends Component {\n\n  constructor(){\n    super()\n    this.state = {\n      monsters: [],\n      searchField: ''\n    };\n    // this.handleChange = this.handleChange.bind(this) // not needed when using arrow funct\n  }\n\n\n  async componentDidMount(){\n    const response = await fetch(\"https://jsonplaceholder.typicode.com/users\")\n    const monster = await response.json()\n    this.setState({ monsters: monster })\n  }\n\n  handleChange = (e) =>  {\n    this.setState({ searchField: e.target.value });\n  }\n\n  render() {\n    const { monsters, searchField } = this.state\n    const filterMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n      )\n      \n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox\n          placeholder={\"search monsters\"}\n          handleChange={this.handleChange}\n        />\n\n        <CardList monsters={filterMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}